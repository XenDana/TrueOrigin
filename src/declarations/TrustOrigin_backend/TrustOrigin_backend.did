type Metadata = record {
    key: text;
    value: text;
};

type Organization = record {
    id: principal;
    name: text;
    description: text;
    metadata: vec Metadata;
    created_at: nat64;
    created_by: principal;
    updated_at: nat64;
    updated_by: principal;
};

type OrganizationInput = record {
    name: text;
    description: text;
    metadata: vec Metadata;
};

type Product = record {
    id: principal;
    name: text;
    org_id: principal;
    category: text;
    description: text;
    metadata: vec Metadata;
    created_at: nat64;
    created_by: principal;
    updated_at: nat64;
    updated_by: principal;
};

type ProductInput = record  {
    name: text;
    org_id: principal;
    category: text;
    description: text;
    metadata: vec Metadata;
};

type User = record {
    id: principal;
    is_principal: bool;
    is_enabled: bool;
    org_ids: vec principal;
    first_name: opt text;
    last_name: opt text;
    phone_no: opt text;
    email: opt text;
    detail_meta: vec Metadata;
    address: text;
    created_at: nat64;
    created_by: principal;
    updated_at: nat64;
    updated_by: principal;
};

type UserDetailsInput = record {
    first_name: text;
    last_name: text;
    phone_no: text;
    email: text;
    detail_meta: vec Metadata;
};

type GenericError = record {
    message: text;
    details: vec Metadata;
};

type UserResult = variant {
    user: opt User;
    error: GenericError;
};

type GetMyProfileResponse = variant {
  Ok : User;
  Err : text;
};

type Result = variant { Ok : nat; Err : text };
type BalanceResult = variant { Ok : nat; Err : text };
type Tokens = record { e8s : nat64 };
type TransferArgs = record {
amount : nat
};

service : {
    "get_organization_by_id": (id: principal) -> (opt Organization) query;
    "create_organization": (input: OrganizationInput) -> (Organization);
    "update_organization": (id: principal, input: OrganizationInput) -> (Organization);
    "create_product": (input: ProductInput) -> (Product);
    "get_product_by_id": (id: principal) -> (opt Product) query;
    "update_product": (id: principal, input: ProductInput) -> (Product);
    "register": () -> (User);
    "get_user_by_id": (id: principal) -> (opt User) query;
    "whoami": () -> (opt User) query;
    "update_self_details": (input: UserDetailsInput) -> (User);
    "create_user": (id: principal, input: UserDetailsInput) -> (UserResult);
    "update_user": (id: principal, input: UserDetailsInput) -> (UserResult);
    "update_user_orgs": (id: principal, org_ids: vec principal) -> (UserResult);
    "greet" : (text) -> (text) query;
    "save_my_profile" : (text) -> (GetMyProfileResponse);
    "get_my_profile" : () -> (GetMyProfileResponse) query;
    "canister_account" : () -> (vec nat8) query;
    "transfer" : (TransferArgs) -> (Result);
    "get_balance" : () -> (BalanceResult);
};